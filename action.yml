name: 'Checkmarx One++ GitHub Action'
description: 'Orchestrates vulnerability scanning and issue tracker item lifecycle.'
author: 'Nathan Leach, Principal Solutions Architect, Checkmarx'

inputs:
  base-uri:
    required: false
    default: https://ast.checkmarx.net
    description: 'Provide the CxOne portal URL'
  base-auth-uri:
    required: false
    default: https://iam.checkmarx.net
    description: 'Provide the CxOne base auth url'
  cx-tenant:
    required: true
    description: 'Provide the Tenant for CxOne portal URL'
  cx-client-id:
    required: true
    description: 'OAuth Client ID for API access'
  cx-client-secret:
    required: true
    description: 'OAuth client secret key for API access'
  project-name:
    required: false
    default: ${{ github.repository }}
    description: 'Scan project name'
  additional-scan-params:
    required: false
    default: ''
    description: 'Additional parameters passed to the CxOne CLI after scan create'

  cx-cli-debug:
    default: false
    description: Turn on debugging for the CxOne CLI
  cx-cli-agent:
    default: 'cxonepp-gh-action'
    description: The agent name to use when performing CxOne CLI commands

  container-image:
    required: true
    description: The container tag that was made with the cx-supply-chain-toolkit.

  docker-login-registry:
    default: docker.io
    description: The name of the container registry to use for login.
  docker-login-username:
    default: ''
    description: The username for the container registry login.
  docker-login-password:
    default: ''
    description: The password for the container registry login.

  upload-sarif-file:
    default: true
    description: Uploads the Sarif file to create entries on the GitHub security tab during push events. 

  show-versions:
    default: true
    description: If true, emits the versions of the CxOne CLI and SCA Resolver in the action log.

  container-run-command:
    default: 'docker run'
    description: The command used to execute the container.
  container-run-command-params:
    default: "-t --rm -v ${GITHUB_WORKSPACE}:/sandbox/input -v $(realpath ${GITHUB_WORKSPACE}/../output):/sandbox/output"
    description: The command used to execute the container.

outputs:
  scan-id:
    description: The ID of the scan executed
    value: ${{ steps.identifiers.outputs.scan-id}}

  project-id:
    description: The ID of the project where the scan was executed
    value: ${{ steps.get-identifiers.outputs.project-id}}

runs:
  using: 'composite'
  steps:

    - name: Setup working environment
      shell: bash
      run: |
        [ "${{ inputs.cx-cli-debug }}" == "true" ] && CXONECLI_DEBUG_FLAG='--debug' || :
        echo "DOCKER_RUN=${{ inputs.container-run-command }} ${{ inputs.container-run-command-params }}" >> "$GITHUB_ENV"
        echo "CXONE_CLI_GLOBAL_PARAMS=$CXONECLI_DEBUG_FLAG --agent \"${{ inputs.cx-cli-agent }}\" --client-id \"${{ inputs.cx-client-id }}\" --client-secret \"${{ inputs.cx-client-secret }}\" --tenant \"${{ inputs.cx-tenant }}\" --base-uri ${{ inputs.base-uri }} --base-auth-uri ${{ inputs.base-auth-uri }}" >> "$GITHUB_ENV"
        echo "CXONE_CLI_SCAN_PARAMS=${{ inputs.additional-scan-params }} --project-name \"${{ inputs.project-name }}\" --branch \"${{ github.ref_name }}\" --sca-resolver /sandbox/resolver/ScaResolver --output-path /sandbox/output -s /sandbox/input_sandbox --report-format summaryJSON" >> "$GITHUB_ENV"
        echo "CXONE_OUTPATH=$(realpath ${GITHUB_WORKSPACE}/../output)" >> "$GITHUB_ENV"
        mkdir $(realpath ${GITHUB_WORKSPACE}/../output)
        ls -l ..
        whoami
        getent group $(whoami)

    - name: Container Registry Login
      uses: docker/login-action@v2
      if: inputs.docker-login-username != '' && inputs.docker-login-password != ''
      with:
        registry: ${{ inputs.docker-login-registry }}
        username: ${{ inputs.docker-login-username }}
        password: ${{ inputs.docker-login-password }}

    - name: Pull Container
      shell: bash
      run: docker pull ${{ inputs.container-image}} > /dev/null
    
    - name: Show Versions
      if: ${{ inputs.show-versions == 'true' }}
      shell: bash
      run: |
        ${{ env.DOCKER_RUN }} ${{ inputs.container-image}} --version | cat -v | sed -E 's/.*(CxSCA Resolver.[0-9.]+)\^M$/\1/g'
        echo CxOne CLI $(${{ env.DOCKER_RUN }} ${{ inputs.container-image}} cxone version)

    - name: Execute Scan
      shell: bash
      run: ${{ env.DOCKER_RUN }} ${{ inputs.container-image}} cxone scan create ${{ env.CXONE_CLI_SCAN_PARAMS }} ${{ env.CXONE_CLI_GLOBAL_PARAMS }}

    - name: Collect Output Identifiers
      id: get-identifiers
      shell: bash
      run: |
        echo "scan-id=$(jq -Mr .ScanID ${{ env.CXONE_OUTPATH }}/cx_result.json)" >> "$GITHUB_OUTPUT"
        echo "project-id=$(jq -Mr .ProjectID ${{ env.CXONE_OUTPATH }}/cx_result.json)" >> "$GITHUB_OUTPUT"




branding:
  color: 'green'
  icon: 'layers'